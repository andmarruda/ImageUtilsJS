class ImageUtils{constructor(e){this.allowedImageTypes={jpg:"image/jpeg",gif:"image/gif",png:"image/png",svg:"image/svg+xml",webp:"image/webp"},this.image=e,this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.canvas.width=e.width,this.canvas.height=e.height,this.ctx.drawImage(e,0,0,e.width,e.height)}getCanvas(){return this.canvas}resize(){return new Resize(this)}outputCanvas(e,t){return e.appendChild(t??this.canvas),this}download(e,t){const s=document.createElement("a");return s.download=e,s.href=(t??this.canvas).toDataURL(),s.click(),this}getColorPallete(e=5,t){const s={},a=(t??this.ctx).getImageData(0,0,this.canvas.width,this.canvas.height).data;for(let e=0;e<a.length;e+=4){const t=`${a[e]},${a[e+1]},${a[e+2]}`;t in s?s[t]++:s[t]=1}const i=Object.keys(s).map((e=>({rgb:e,count:s[e]})));return i.sort(((e,t)=>t.count-e.count)),i.slice(0,e)}rgbToHex(e){const[t,s,a]=e.split(",");return`#${t.toString(16)}${s.toString(16)}${a.toString(16)}`}hexToRgb(e){const[t,s,a]=e.match(/\w\w/g).map((e=>parseInt(e,16)));return`${t},${s},${a}`}async getBlob(e="png",t=1,s){const a=await new Promise((a=>(s??this.canvas).toBlob(a,this.allowedImageTypes[e],t)));return new File([a],`picture.${e}`,{type:this.allowedImageTypes[e],lastModified:Date.now()})}async getBase64(e="png",t=1,s){return await new Promise((a=>a((s??this.canvas).toDataURL(this.allowedImageTypes[e],t))))}}IULoadFromUrl=async e=>{const t=new Image;t.src=e;const s=new Promise(((e,s)=>{t.onload=()=>e(t),t.onerror=()=>s(new Error("Image load error"))}));return await s,new ImageUtils(t)},IULoadFromInputFile=async e=>{if(!e.files||!e.files[0])throw new Error("No file selected");const t=new Image;t.src=URL.createObjectURL(e.files[0]);const s=new Promise(((e,s)=>{t.onload=()=>e(t),t.onerror=()=>s(new Error("Image load error"))}));return await s,new ImageUtils(t)},MathUtils={calcProportion:(e,t)=>100*e/t,calcPercentage:(e,t)=>e*t/100,toPercentage:e=>e/100};class Resize{constructor(e){this.iu=e,this.canvas=e.getCanvas()}resize(e,t){return this.resizedCanvas=document.createElement("canvas"),this.resizedCtx=this.resizedCanvas.getContext("2d"),this.resizedCanvas.width=e,this.resizedCanvas.height=t,this.resizedCtx.drawImage(this.canvas,0,0,e,t),this}resizeByPercentage(e){return e=MathUtils.toPercentage(e),this.resize(this.canvas.width*e,this.canvas.height*e),this}resizeByWidth(e){const t=MathUtils.calcProportion(e,this.canvas.width);return this.resizeByPercentage(t),this}resizeByHeight(e){const t=MathUtils.calcProportion(e,this.canvas.height);return this.resizeByPercentage(t),this}getResizedCanvas(){return this.resizedCanvas}outputResizedCanvas(e){return this.iu.outputCanvas(e,this.resizedCanvas),this}getResizedColorPallete(e){return this.iu.getColorPallete(e,this.resizedCtx)}}